#include <algorithm>
#include <cstdlib>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>

#define MAX_ATTEMPTS 6

using namespace std;

// Main class
class HangmanGame {
public:
    // Constructor to initialize the game
    HangmanGame() {
        srand(static_cast<unsigned int>(time(nullptr)));
    }

    // Function to start or restart the game
    void start() {
        // Reset game state
        secretWord = getRandomWord();
        currentWord = string(secretWord.length(), '_');
        attemptsLeft = MAX_ATTEMPTS;
        guessedLetters.clear();

        // Start the game
        play();
    }

private:
    string secretWord;
    string currentWord;
    int attemptsLeft;
    vector<char> guessedLetters;

    // Function to start the game
    void play() {
        cout << "Welcome to Hangman!" << endl;
        cout << "Category: Computer Terms" << endl;
        cout << "You have " << attemptsLeft
             << " attempts to guess the term."
             << endl;

        // The main game loop which will go on till the
        // attempts are left or the game is won.
        while (attemptsLeft > 0) {
            displayGameInfo();
            char guess;
            cout << "Guess a letter: ";
            cin >> guess;

            if (isalpha(guess)) {
                guess = tolower(guess);
                if (alreadyGuessed(guess)) {
                    cout << "You've already guessed that letter." << endl;
                } else {
                    bool correctGuess = updateCurrentWord(guess);
                    // If the guess is correct, update the word and check if the word is completely guessed or not
                    if (correctGuess) {
                        cout << "Good guess!" << endl;
                        // If the word is completely guessed
                        if (currentWord == secretWord) {
                            displayGameInfo();
                            cout << "Congratulations! You guessed the word: "
                                 << secretWord << endl;
                            askToPlayAgain();
                            return;
                        }
                    } else {
                        cout << "Incorrect guess." << endl;
                        attemptsLeft--;
                        drawHangman(attemptsLeft);
                    }
                }
            } else {
                cout << "Please enter a valid letter." << endl;
            }
        }

        if (attemptsLeft == 0) {
            displayGameInfo();
            cout << "You've run out of attempts. The word was: "
                 << secretWord << endl;
            cout << "Better luck next time!" << endl;
            askToPlayAgain();
        }
    }

    // Function to handle asking if the user wants to play again
    void askToPlayAgain() {
        char choice;
        cout << "Do you want to try again? (y/n): ";
        cin >> choice;
        choice = tolower(choice);
        if (choice == 'y') {
            start(); // Restart the game
        } else {
            cout << "Thank you for playing!" << endl;
        }
    }

    // Select random word from the predefined word list
    string getRandomWord() {
        vector<string> words = { "algorithm", "binary", "compiler", "debugger",
                                 "encryption", "hardware", "interface", "memory",
                                 "network", "processor" };
        int index = rand() % words.size();
        return words[index];
    }

    // Checking if the letter has already been guessed
    bool alreadyGuessed(char letter) {
        return find(guessedLetters.begin(), guessedLetters.end(), letter)
            != guessedLetters.end();
    }

    // Updating the word after a correct guess
    bool updateCurrentWord(char letter) {
        bool correctGuess = false;
        for (int i = 0; i < secretWord.length(); i++) {
            if (secretWord[i] == letter) {
                currentWord[i] = letter;
                correctGuess = true;
            }
        }
        guessedLetters.push_back(letter);
        return correctGuess;
    }

    // Function to provide information at a particular point in the game
    void displayGameInfo() {
        cout << "Word: " << currentWord << endl;
        cout << "Attempts left: " << attemptsLeft << endl;
        cout << "Guessed letters: ";
        for (char letter : guessedLetters) {
            cout << letter << " ";
        }
        cout << endl;
    }

    // Function to progressively draw the hangman
    void drawHangman(int attemptsLeft) {
        if (attemptsLeft == 5) {
            cout << " _____" << endl;
            cout << " |     |" << endl;
            cout << " |     O" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
        } else if (attemptsLeft == 4) {
            cout << " _____" << endl;
            cout << " |     |" << endl;
            cout << " |     O" << endl;
            cout << " |     |" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
        } else if (attemptsLeft == 3) {
            cout << " _____" << endl;
            cout << " |     |" << endl;
            cout << " |     O" << endl;
            cout << " |    /|" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
        } else if (attemptsLeft == 2) {
            cout << " _____" << endl;
            cout << " |     |" << endl;
            cout << " |     O" << endl;
            cout << " |    /|\\" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
        } else if (attemptsLeft == 1) {
            cout << " _____" << endl;
            cout << " |     |" << endl;
            cout << " |     O" << endl;
            cout << " |    /|\\" << endl;
            cout << " |    /" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
        } else if (attemptsLeft == 0) {
            cout << " _____" << endl;
            cout << " |     |" << endl;
            cout << " |     O" << endl;
            cout << " |    /|\\" << endl;
            cout << " |    / \\" << endl;
            cout << " |" << endl;
            cout << " |" << endl;
        }
    }
};

// Driver code
int main() {
    HangmanGame game;
    game.start(); // Start the game for the first time
    return 0;
}
